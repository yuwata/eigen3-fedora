diff -rupN eigen-eigen-2249f9c22fe8/Eigen/src/Core/products/SelfadjointMatrixVector.h eigen-eigen-2249f9c22fe8-new/Eigen/src/Core/products/SelfadjointMatrixVector.h
--- eigen-eigen-2249f9c22fe8/Eigen/src/Core/products/SelfadjointMatrixVector.h	2013-04-16 09:38:40.000000000 +0200
+++ eigen-eigen-2249f9c22fe8-new/Eigen/src/Core/products/SelfadjointMatrixVector.h	2013-04-19 14:31:27.620526893 +0200
@@ -35,7 +35,7 @@ static EIGEN_DONT_INLINE void run(
   Scalar alpha)
 {
   typedef typename packet_traits<Scalar>::type Packet;
-  typedef typename NumTraits<Scalar>::Real RealScalar;
+  // typedef typename NumTraits<Scalar>::Real RealScalar;
   const Index PacketSize = sizeof(Packet)/sizeof(Scalar);
 
   enum {
diff -rupN eigen-eigen-2249f9c22fe8/Eigen/src/Core/util/Memory.h eigen-eigen-2249f9c22fe8-new/Eigen/src/Core/util/Memory.h
--- eigen-eigen-2249f9c22fe8/Eigen/src/Core/util/Memory.h	2013-04-16 09:38:40.000000000 +0200
+++ eigen-eigen-2249f9c22fe8-new/Eigen/src/Core/util/Memory.h	2013-04-19 14:32:07.188032232 +0200
@@ -451,7 +451,7 @@ template<typename T, bool Align> inline
 template<typename Scalar, typename Index>
 static inline Index first_aligned(const Scalar* array, Index size)
 {
-  typedef typename packet_traits<Scalar>::type Packet;
+  // typedef typename packet_traits<Scalar>::type Packet;
   enum { PacketSize = packet_traits<Scalar>::size,
          PacketAlignedMask = PacketSize-1
   };
diff -rupN eigen-eigen-2249f9c22fe8/Eigen/src/Eigenvalues/ComplexSchur.h eigen-eigen-2249f9c22fe8-new/Eigen/src/Eigenvalues/ComplexSchur.h
--- eigen-eigen-2249f9c22fe8/Eigen/src/Eigenvalues/ComplexSchur.h	2013-04-16 09:38:40.000000000 +0200
+++ eigen-eigen-2249f9c22fe8-new/Eigen/src/Eigenvalues/ComplexSchur.h	2013-04-19 14:33:01.652351334 +0200
@@ -309,7 +309,7 @@ struct complex_schur_reduce_to_hessenber
   static void run(ComplexSchur<MatrixType>& _this, const MatrixType& matrix, bool computeU)
   {
     typedef typename ComplexSchur<MatrixType>::ComplexScalar ComplexScalar;
-    typedef typename ComplexSchur<MatrixType>::ComplexMatrixType ComplexMatrixType;
+    // typedef typename ComplexSchur<MatrixType>::ComplexMatrixType ComplexMatrixType;
 
     // Note: m_hess is over RealScalar; m_matT and m_matU is over ComplexScalar
     _this.m_hess.compute(matrix);
diff -rupN eigen-eigen-2249f9c22fe8/Eigen/src/Eigenvalues/Tridiagonalization.h eigen-eigen-2249f9c22fe8-new/Eigen/src/Eigenvalues/Tridiagonalization.h
--- eigen-eigen-2249f9c22fe8/Eigen/src/Eigenvalues/Tridiagonalization.h	2013-04-16 09:38:40.000000000 +0200
+++ eigen-eigen-2249f9c22fe8-new/Eigen/src/Eigenvalues/Tridiagonalization.h	2013-04-19 14:33:30.100995677 +0200
@@ -425,7 +425,7 @@ struct tridiagonalization_inplace_select
 template<typename MatrixType, typename DiagonalType, typename SubDiagonalType>
 void tridiagonalization_inplace(MatrixType& mat, DiagonalType& diag, SubDiagonalType& subdiag, bool extractQ)
 {
-  typedef typename MatrixType::Index Index;
+  // typedef typename MatrixType::Index Index;
   //Index n = mat.rows();
   eigen_assert(mat.cols()==mat.rows() && diag.size()==mat.rows() && subdiag.size()==mat.rows()-1);
   tridiagonalization_inplace_selector<MatrixType>::run(mat, diag, subdiag, extractQ);
diff -rupN eigen-eigen-2249f9c22fe8/Eigen/src/QR/HouseholderQR.h eigen-eigen-2249f9c22fe8-new/Eigen/src/QR/HouseholderQR.h
--- eigen-eigen-2249f9c22fe8/Eigen/src/QR/HouseholderQR.h	2013-04-16 09:38:40.000000000 +0200
+++ eigen-eigen-2249f9c22fe8-new/Eigen/src/QR/HouseholderQR.h	2013-04-19 14:33:56.147670049 +0200
@@ -232,7 +232,7 @@ void householder_qr_inplace_blocked(Matr
 {
   typedef typename MatrixQR::Index Index;
   typedef typename MatrixQR::Scalar Scalar;
-  typedef typename MatrixQR::RealScalar RealScalar;
+  // typedef typename MatrixQR::RealScalar RealScalar;
   typedef Block<MatrixQR,Dynamic,Dynamic> BlockType;
 
   Index rows = mat.rows();
